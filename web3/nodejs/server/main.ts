
interface Block{
    index: number;              // 순차적 블록 번호
    timestamp : number;         // 새 블록이 블록체인에 추가된 날짜와 시간
    data: string;               // 한 번 이상의 거래에 대한 데이터
    nonce: number;              // 채굴자들이 알아내야 할 숫자
    hash: string;               // 이 블록의 해시
    previousBlockHash : string; // 이전 블록의 해시값
}


import * as crypto from 'crypto';
import * as Logger from './logger';

/*
    function hashSample(password: number) : number
    {
        const hash = 10 + (password % 2);
        console.log(`Original password : ${password}, hashed value: ${hash}`);
        return hash;
    }
*/


let nonce = 0;
async function generateHash(input : string) : Promise<string>{
    const msgBuffer = new TextEncoder().encode(input); // UTF-8 으로 변환합니다.
    const hashBuffer = await crypto.subtle.digest('SHA-256', msgBuffer);
    const hashArray = Array.from(new Uint8Array(hashBuffer));
    const hashHex = hashArray.map( b => ('00'+b.toString(16)).slice(-2)).join("");

    return hashHex;
}

async function calculateHashWithNonce(nonce: number): Promise<string>{
    const data = 'Hello World' + nonce;
    return generateHash(data);
}

async function mine(): Promise<void>{
    let hash:string;
    do{
        hash = await calculateHashWithNonce(++nonce);
    }while(hash.startsWith('0000') === false );
    console.log(`Hash:${hash}, nonce:${nonce}`);
}
